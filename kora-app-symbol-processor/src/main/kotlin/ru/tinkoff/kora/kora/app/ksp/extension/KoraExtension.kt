package ru.tinkoff.kora.kora.app.ksp.extension

import com.google.devtools.ksp.getConstructors
import com.google.devtools.ksp.isPublic
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSType
import com.squareup.kotlinpoet.ClassName
import ru.tinkoff.kora.ksp.common.CommonAopUtils.hasAopAnnotations
import ru.tinkoff.kora.ksp.common.KspCommonUtils.getClassDeclarationByName
import ru.tinkoff.kora.ksp.common.exception.ProcessingErrorException
import ru.tinkoff.kora.ksp.common.generatedClass

interface KoraExtension {
    fun getDependencyGenerator(resolver: Resolver, type: KSType, tags: Set<String>): (() -> ExtensionResult)?

    fun generatedByProcessor(resolver: Resolver, type: KSType, source: KSClassDeclaration, postfix: ClassName): (() -> ExtensionResult)? {
        return generatedByProcessor(resolver, type, source, postfix.simpleName)
    }

    fun generatedByProcessor(resolver: Resolver, type: KSType, source: KSClassDeclaration, postfix: String): (() -> ExtensionResult)? {
        val generatedTypeName = source.generatedClass(postfix)
        val packageName = source.packageName.asString()
        val generatedClassName = ClassName(packageName, generatedTypeName)
        return {
            val maybeGenerated = resolver.getClassDeclarationByName(generatedClassName)
            if (maybeGenerated == null) {
                throw ProcessingErrorException(
                    "Component with type ${type} and class name ${generatedClassName} expected to be generated by annotation processor supported with extension ${this}, but was not found",
                    source
                )
            }
            val constructors = if (maybeGenerated.hasAopAnnotations()) {
                val aopProxyClassName = ClassName(packageName, maybeGenerated.generatedClass("_AopProxy"))
                val aopProxyClassDecl = resolver.getClassDeclarationByName(aopProxyClassName)
                if (aopProxyClassDecl == null) {
                    throw ProcessingErrorException(
                        "Component with type ${type} and class name ${aopProxyClassName} expected to be generated by annotation processor supported with extension ${this}, but was not found",
                        source
                    )
                }
                aopProxyClassDecl.primaryConstructor?.let { sequenceOf(it) } ?: aopProxyClassDecl.getConstructors()
            } else {
                maybeGenerated.primaryConstructor?.let { sequenceOf(it) } ?: maybeGenerated.getConstructors()
            }.filter { it.isPublic() }.toList()
            if (constructors.size == 1) {
                ExtensionResult.fromConstructor(constructors[0], maybeGenerated)
            } else {
                throw ProcessingErrorException("Extension generated type with more than one constructor", maybeGenerated)
            }
        }
    }
}
